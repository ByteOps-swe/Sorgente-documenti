name: Build LaTeX Document
on:
  pull_request_target:
    branches: 
      - LaTeX_Building
    types: [closed]

jobs:
  Build_Latex:
    if: ${{ github.event.pull_request.merged }}
    runs-on: ubuntu-latest

    steps:
      - name: Clone source repo
        uses: actions/checkout@v4
        with:
          path: Documents
          fetch-depth: 0
          token: ${{ secrets.ACCESS_TOKEN }}
      
      - name: Clone destination repo
        uses: actions/checkout@v4
        with:
          path: Output
          repository: lisienskenderi/pdf-test
          token: ${{ secrets.ACCESS_TOKEN }}
          
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v40

      - name: Compile LaTeX document
        run: |
          ls -la
          cd Output
          ls -la
          git pull

          git config user.name github-actions[bot]
          git config user.email github-actions[bot]@github.com
          cd ..
          cd Documents
          ls -la
          git branch -a
          git config user.name github-actions[bot]
          git config user.email github-actions[bot]@github.com
          cd ..
          docker run -i --rm -v "$(pwd):/work" -w /work -u "$(id -u):$(id -g)" ghcr.io/xu-cheng/texlive-full bash -c '
          shopt -s globstar
          set -e
          set -m

          has_changes=()

          for path in ${{ steps.changed-files.outputs.all_changed_files }}; do(
            echo "$path was changed"
            if [[ "$(basename "$path")" != "Verbale_Esterno.tex" ]] && [[ "$(basename "$path")" != "Verbale_Interno.tex" ]] && [[ $path != *"Sezioni" && $path != *"Sottosezioni" ]] && [[ $path == *.tex ]] 
            then
              echo "sono qua"
              new_name=$(python Documents/Version_finder.py $path)
              cd Documents
              git add "${path}"
              git add "${new_name}"
              
              path_no_under="${new_name//_/ }"
              name=$(basename "$new_name")
              name_no_ext="${name%.*}"
              new_only_name="Aggiornato $name_no_ext"
              if [[ -n "$(git status --porcelain)" ]]; then
                git commit -m "$new_only_name"
              else
                echo "No changes to commit"
              fi
              cd "$(dirname "$path")"
              latexmk -pdf "$(basename "$new_name")"
              cd ..
            elif [[ "$path" == *"Sezioni" || "$path" == *"Sottosezioni" ]]; then
              echo "Sono fuori dal tunnellellellel"
              father_dir=$(dirname "$path")
              doc_name=$(basename "$father_dir")
              if [[ doc_name == "Norme_di_progetto" ]]; then
                has_changes[0]=true
              elif [[ doc_name == "Piano_di_progetto" ]]; then
                has_changes[1]=true
              elif [[ doc_name == "Analisi_dei_requisiti" ]]; then
                has_changes[2]=true
              fi
            else 
              echo "Questo Ã¨ un template"
            fi
          )done

          if [ "${has_changes[0]}" = true ]; then
            new_name=$(python Documents/Version_finder.py 'RTB/Norme_di_progetto_v0.2.0.tex')
            cd Documents
            git add "RTB/Norme_di_progetto_v0.2.0.tex"
            git add "${new_name}"
              
            path_no_under="${new_name//_/ }"
            name=$(basename "$new_name")
            name_no_ext="${name%.*}"
            new_only_name="Aggiornato $name_no_ext"
            cd "$(dirname "RTB/Norme_di_progetto_v0.2.0.tex")"
            latexmk -pdf "$(basename "$new_name")"
            cd ..
          fi

          if [ "${has_changes[1]}" = true ]; then
            new_name=$(python Documents/Version_finder.py "RTB/Piano_di_progetto_v0.0.2.tex")
            cd Documents
            git add "RTB/Piano_di_progetto_v0.0.2.tex"
            git add "${new_name}"
              
            path_no_under="${new_name//_/ }"
            name=$(basename "$new_name")
            name_no_ext="${name%.*}"
            new_only_name="Aggiornato $name_no_ext"
            cd "$(dirname "RTB/Piano_di_progetto_v0.0.2.tex")"
            latexmk -pdf "$(basename "$new_name")"
            cd ..
          fi
      
          cd Output

          git add .
          git status

          if [[ -n "$(git status --porcelain)" ]]; then
            git commit -m "Cancellato file deprecati"
          else
            echo "No changes to commit."
          fi
          cd ..
          '

      - name: upload pdf
        run: |
          shopt -s globstar
          set -e

          if find "Documents" -type f -name "*.pdf" -print -quit 2>/dev/null; then
            for path in Documents/**/*.pdf; do (
              echo "$path"
              dirname=$(dirname "$path")
              dirname=${dirname#Documents/}
              new_dirname="Output/$dirname"
              dirname_no_under="${new_dirname//_/ }"

              name_old=$(basename "$path")
              name_no_ext="${name_old%.*}"
              name_no_under="${name_no_ext//_/ }"
              name="${name_old//_/ }"
              new_name="Aggiornato $name_no_under"

              if [ ! -d "$dirname_no_under" ]; then
                mkdir -p "${dirname_no_under}"
                echo "created: $dirname_no_under"
              fi

              mv -f "$path" "${dirname_no_under}"
              mv -f "$dirname_no_under"/"$name_old" "$dirname_no_under"/"$name"

              path_no_under="${path//_/ }"
              path_no_under=${path_no_under#Documents/}
              
              cd Output
              git add "${path_no_under}"
              if [[ -n "$(git status --porcelain)" ]]; then
                git commit -m "$new_name"
              else
                echo "No changes to commit"
              fi
              
              cd ..
            ) done
          fi
          cd Output
          
          git config --global push.autoSetupRemote true
          git status
          git push

          cd .. 
          cd Documents
          git push
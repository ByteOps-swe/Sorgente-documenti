name: Build LaTeX Document
on:
  pull_request_target:
    branches: 
      - LaTeX_Building
    types: [closed]

jobs:
  Build_Latex:
    if: ${{ github.event.pull_request.merged }}
    runs-on: ubuntu-latest

    steps:
      - name: Clone source repo
        uses: actions/checkout@v4
        with:
          path: Documents
          fetch-depth: 0
          token: ${{ secrets.ACCESS_TOKEN }}
      
      - name: Clone destination repo
        uses: actions/checkout@v4
        with:
          path: Output
          repository: lisienskenderi/pdf-test
          token: ${{ secrets.ACCESS_TOKEN }}
          
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v40

      - name: Compile LaTeX document
        run: |
          cd Output
          git pull

          git config user.name github-actions[bot]
          git config user.email github-actions[bot]@github.com
          cd ..
          cd Documents
          git config user.name github-actions[bot]
          git config user.email github-actions[bot]@github.com
          
          cd ..
          # Check if there are any deleted files
          if [[ -n "${{ steps.changed-files.outputs.deleted_files }}" ]]; then
              # Iterate through the deleted files
              for deleted_file in ${{ steps.changed-files.outputs.deleted_files }}; do
                  echo "Deleted file: $deleted_file"
                  # Check if the deleted file is a Python script
                  if [[ $deleted_file == *.tex ]]; then
                      # Call the Python script to delete the file and its folder if empty
                      python Documents/delete_latex_files.py "$deleted_file"
                  fi
              done
          else
              echo "No deleted files found."
          fi
          docker run -i --rm -v "$(pwd):/work" -w /work -u "$(id -u):$(id -g)" ghcr.io/xu-cheng/texlive-full bash -c '
          bash --version
          shopt -s globstar
          set -e
          set -m

          declare -a has_changes
          has_changes=(0 0 0)

          for path in ${{ steps.changed-files.outputs.all_changed_files }}; do
            echo "$path was changed"
            if [[ "$(basename "$path")" != "Verbale_Esterno.tex" ]] && [[ "$(basename "$path")" != "Verbale_Interno.tex" ]] && [[ $path != */Sezioni/**.tex ]] && [[ $path != */Sottosezioni/**.tex ]] && [[ $path == *.tex ]] 
            then
              echo "Begin python"
              new_name=$(python Documents/Version_finder.py $path)
              echo "End python"

              cd Documents

              git add "${path}"
              git add "${new_name}"
              
              path_no_under="${new_name//_/ }"
              name=$(basename "$new_name")
              name_no_ext="${name%.*}"
              new_only_name="Aggiornato $name_no_ext"
              if [[ -n "$(git status --porcelain)" ]]; then
                git commit -m "$new_only_name"
              else
                echo "No changes to commit"
              fi
              cd "$(dirname "$path")"
              latexmk -pdf "$(basename "$new_name")"
              cd ..
            elif [[ "$path" == */Sezioni/*.tex || "$path" == */Sottosezioni/*.tex ]]; then
              echo "Sono fuori dal tunnellellellel"
              father_dir=$(dirname "$path")
              doc_name=$(basename "$father_dir")
              echo $doc_name
              if [[ $doc_name == "Norme_di_progetto" ]]; then
                echo "Norme true"
                has_changes[0]=1
                echo ${has_changes[0]}
              elif [[ $doc_name == "Piano_di_progetto" ]]; then
                has_changes[1]=1
              elif [[ $doc_name == "Analisi_dei_requisiti" ]]; then
                has_changes[2]=1
              fi
            else 
              echo "Questo Ã¨ un template"
            fi
          done

          echo "outside"

          for change in "${has_changes[@]}"; do
            echo "$change"
          done
   
          if [[ ${has_changes[0]} -eq 1 ]];
          then
            echo "un attimo che compilo"
            ls -la
            file_path=$(find "Documents/RTB" -type f -name "Norme_di_progetto*.tex")
            echo $file_path
            new_name=$(python Documents/Version_finder.py $file_path)
            ls -la
            git add "${file_path}"
            git add "${new_name}"
              
            path_no_under="${new_name//_/ }"
            name=$(basename "$new_name")
            name_no_ext="${name%.*}"
            cd "$(dirname "$file_path")"
            latexmk -pdf "$(basename "$new_name")"
            cd ..
          fi

          if [ "${has_changes[1]}" == true ]; then
            file_path=$(find "../RTB" -type f -name "Piano_di_progetto*.tex")
            new_name=$(python Documents/Version_finder.py $file_path)
            cd Documents
            git add "${file_path}"
            git add "${new_name}"
              
            path_no_under="${new_name//_/ }"
            name=$(basename "$new_name")
            name_no_ext="${name%.*}"
            cd "$(dirname "$file_path")"
            latexmk -pdf "$(basename "$new_name")"
            cd ..
          fi

          ls -la
          cd ..
          ls -la
          cd Output

          git add .
          git status

          if [[ -n "$(git status --porcelain)" ]]; then
            git commit -m "Cancellato file deprecati"
          else
            echo "No changes to commit."
          fi
          cd ..
          '

      - name: upload pdf
        run: |
          shopt -s globstar
          set -e

          if find "Documents" -type f -name "*.pdf" -print -quit 2>/dev/null; then
            ls -la
            for path in Documents/**/*.pdf; do (
              echo "$path"
              if [[ $path != "Documents/**/*.pdf" ]]; then
                dirname=$(dirname "$path")
                dirname=${dirname#Documents/}
                new_dirname="Output/$dirname"
                dirname_no_under="${new_dirname//_/ }"

                name_old=$(basename "$path")
                name_no_ext="${name_old%.*}"
                name_no_under="${name_no_ext//_/ }"
                name="${name_old//_/ }"
                new_name="Aggiornato $name_no_under"

                if [ ! -d "$dirname_no_under" ]; then
                  mkdir -p "${dirname_no_under}"
                  echo "created: $dirname_no_under"
                fi

                mv -f "$path" "${dirname_no_under}"
                mv -f "$dirname_no_under"/"$name_old" "$dirname_no_under"/"$name"

                path_no_under="${path//_/ }"
                path_no_under=${path_no_under#Documents/}
                
                cd Output
                git add "${path_no_under}"
                if [[ -n "$(git status --porcelain)" ]]; then
                  git commit -m "$new_name"
                else
                  echo "No changes to commit"
                fi
                
                cd ..
              fi
            ) done
          fi
          cd Output
          
          git config --global push.autoSetupRemote true
          git status
          git push

          cd .. 
          cd Documents
          git push